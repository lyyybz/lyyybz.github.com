<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Android Studio汇总]]></title>
      <url>https://www.lyyybz.com/lyyybz.github.io/2016/12/28/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80-Android-Android%20Studio%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<p>汇总Android Studio使用过程中遇到的一些异常及其解决办法。<br><a id="more"></a></p>
<ul>
<li>Error:(1, 0) Your project path contains non-ASCII characters. This will most likely cause the build to fail on Windows. Please move your project to a different directory. See <a href="http://b.android.com/95744" target="_blank" rel="external">http://b.android.com/95744</a> for details. This warning can be disabled by using the command line flag -Dcom.android.build.gradle.overridePathCheck=true, or adding the line com.android.build.gradle.overridePathCheck=true’ to gradle.properties file in the project directory.<br>大概意思是：项目路径包含非ASCII字符，这很可能会导致构建失败。。。。什么什么的。<br>废话一堆， 就是路径里不能含有中文！改成拼音或英文就行了，怕你们看不情重点，故意加大字号^__^。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA 4j家族]]></title>
      <url>https://www.lyyybz.com/lyyybz.github.io/2016/12/22/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80-JAVA-JAVA%204j%E5%AE%B6%E6%97%8F/</url>
      <content type="html"><![CDATA[<p><center><br>4j ↔ four java ↔ for java ↔ 为JAVA而生<br></center><br><a id="more"></a></p>
<ul>
<li><a href="https://github.com/teaey/apns4j" target="_blank" rel="external"><strong>apns4j</strong></a> - Apple Push Notification Service Implement with Java. </li>
<li><a href="http://args4j.kohsuke.org/" target="_blank" rel="external"><strong>args4j</strong></a> - args4j is a small Java class library that makes it easy to parse command line options / arguments in your CUI application. </li>
<li><a href="https://com4j.java.net/" target="_blank" rel="external"><strong>com4j</strong></a> - The goal of the project is to provide a better integration of Java and COM.</li>
<li><a href="https://www.oschina.net/p/comet4j" target="_blank" rel="external"><strong>comet4j</strong></a> - Comet4J(Comet for Java)是一个纯粹基于AJAX(XMLHTTPRequest)的服务器推送框架，消息以JSON方式传递，具备长轮询、长连接、自动选择三种工作模式。  </li>
<li><a href="https://github.com/zhuoran/crawler4j" target="_blank" rel="external"><strong>crawler4j</strong></a> - crawler4j是使用JAVA开发的开源Web爬虫。</li>
<li><a href="http://www.sauronsoftware.it/projects/cron4j/index.php" target="_blank" rel="external"><strong>cron4j</strong></a> - cron4j is a scheduler for the Java platform which is very similar to the UNIX cron daemon. With cron4j you can launch, from within your Java applications, any task you need at the right time, according to some simple rules.  </li>
<li><a href="http://www.date4j.net/" target="_blank" rel="external"><strong>date4j</strong></a> - It’s an alternative to Date, Calendar, and related Java classes. </li>
<li><a href="http://deeplearning4j.org/" target="_blank" rel="external"><strong>DeepLearning4J</strong></a> - Deeplearning4j is the first commercial-grade, open-source, distributed deep-learning library written for Java and Scala.  </li>
<li><a href="http://dom4j.github.io/" target="_blank" rel="external"><strong>dom4j</strong></a> -  </li>
<li><a href=""><strong>el4j</strong></a> - </li>
<li><a href=""><strong>event4j</strong></a> - </li>
<li><a href="http://exe4j.apponic.com/" target="_blank" rel="external"><strong>exe4j</strong></a> - </li>
<li><a href=""><strong>expression4j</strong></a> - </li>
<li><a href=""><strong>Flow4J</strong></a> -  </li>
<li><a href=""><strong>Formula4J</strong></a> - </li>
<li><a href=""><strong>ftp4j</strong></a> - </li>
<li><a href=""><strong>gif4j</strong></a> - </li>
<li><a href=""><strong>http4j</strong></a> - </li>
<li><a href="https://www.oschina.net/p/iBase4J" target="_blank" rel="external"><strong>iBase4J</strong></a> - </li>
<li><a href=""><strong>image4j</strong></a> - </li>
<li><a href="http://www.imageresize4j.com/" target="_blank" rel="external"><strong>ImageResize4J</strong></a> - </li>
<li><a href=""><strong>install4j</strong></a> - </li>
<li><a href=""><strong>jsonrpc4j</strong></a> - </li>
<li><a href=""><strong>la4j</strong></a> - </li>
<li><a href=""><strong>Launch4j</strong></a> - </li>
<li><a href=""><strong>License4J</strong></a> - </li>
<li><a href=""><strong>ling4j</strong></a> - </li>
<li><a href=""><strong>Lint4j</strong></a> - </li>
<li><a href=""><strong>log4j</strong></a> - </li>
<li><a href=""><strong>logger4j</strong></a> - </li>
<li><a href="https://code.google.com/p/markdown4j/" target="_blank" rel="external"><strong>markdown4j</strong></a> -  </li>
<li><a href=""><strong>mmseg4j</strong></a> - </li>
<li><a href="https://elkan1788.github.io/mpsdk4j/" target="_blank" rel="external"><strong>mpsdk4j</strong></a> - </li>
<li><a href=""><strong>ogre4j</strong></a> -  </li>
<li><a href="http://www.olap4j.org/" target="_blank" rel="external"><strong>olap4j</strong></a> - </li>
<li><a href=""><strong>OpenStack4j</strong></a> - </li>
<li><a href=""><strong>pac4j</strong></a> - </li>
<li><a href=""><strong>perf4j</strong></a> - </li>
<li><a href="http://mvnrepository.com/artifact/com.belerweb/pinyin4j" target="_blank" rel="external"><strong>pinyin4j</strong></a> - </li>
<li><a href=""><strong>Profiler4j</strong></a> - </li>
<li><a href=""><strong>rrd4j</strong></a> - </li>
<li><a href=""><strong>sat4j</strong></a> - </li>
<li><a href=""><strong>shop4j</strong></a> - </li>
<li><a href=""><strong>slf4j</strong></a> - </li>
<li><a href=""><strong>snmp4j</strong></a> - </li>
<li><a href=""><strong>time4j</strong></a> - </li>
<li><a href=""><strong>ui4j</strong></a> - </li>
<li><a href=""><strong>upload4j</strong></a> - </li>
<li><a href=""><strong>web4j</strong></a> - </li>
<li><a href=""><strong>wechat4j</strong></a> - </li>
<li><a href="http://www.weixin4j.org/" target="_blank" rel="external"><strong>Weixin4J</strong></a> - </li>
<li><a href=""><strong>wmi4j</strong></a> - </li>
<li><a href=""><strong>wss4j</strong></a> -  </li>
<li><a href=""><strong>XGBoost4J</strong></a> - </li>
<li><a href="http://www.lingala.net/zip4j/" target="_blank" rel="external"><strong>zip4j</strong></a> - </li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SVN使用问题汇总]]></title>
      <url>https://www.lyyybz.com/lyyybz.github.io/2016/12/22/%E5%8A%9E%E5%85%AC%E8%BD%AF%E4%BB%B6-SVN-SVN%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<p>SVN使用问题汇总<br><a id="more"></a></p>
<h1 id="无法添加和提交新增文件"><a href="#无法添加和提交新增文件" class="headerlink" title="无法添加和提交新增文件"></a>无法添加和提交新增文件</h1><p>目录中新建文件或者文件夹，当使用添加 Add 或者提交命令 Commit 时，界面不显示新增加的文件或者文件夹，导致文件无法提交到 SVN 服务器上，但是可以一个一个文件的添加。</p>
<p>原因是当我们同时忽略两个文件夹时，SVN 就会自动添加一个全局的策略，忽略全部（可能是 SVN 的一个BUG），这样就导致新添加的文件或者文件夹被忽略了。</p>
<p><strong>解决办法：</strong></p>
<ul>
<li>在有问题的文件夹上右键属性，选择 SVN 的 Properties 属性。<br><img src="0.jpg" alt="&quot;&quot;"></li>
<li>Properties 属性界面图如下，可以看到有一个全局忽略的值。<br><img src="1.jpg" alt="&quot;&quot;"></li>
<li>打开全局忽略策略的值可以看到有一个 * ，意思就是忽略所有新加的文件和文件夹。<br><img src="2.jpg" alt="&quot;&quot;"></li>
<li>删除全局忽略值中的 * ，文件和文件夹就可以正常的提交了。<br><img src="3.jpg" alt="&quot;&quot;"></li>
</ul>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Html特殊字符编码大全]]></title>
      <url>https://www.lyyybz.com/lyyybz.github.io/2016/12/21/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80-Html-%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E5%A4%A7%E5%85%A8/</url>
      <content type="html"><![CDATA[<p>Html特殊字符编码大全<br><a id="more"></a><br><strong>特殊字符编码大全</strong><br><img src="1.jpg" alt="&quot;&quot;"><br><strong>常用特殊字符</strong><br><img src="2.jpg" alt="&quot;&quot;"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA异常汇总]]></title>
      <url>https://www.lyyybz.com/lyyybz.github.io/2016/12/21/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80-JAVA-JAVA%E5%BC%82%E5%B8%B8%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<p>汇总JAVA使用过程中遇到的一些异常及其解决办法。<br><a id="more"></a></p>
<h1 id="java-lang-InstantiationException"><a href="#java-lang-InstantiationException" class="headerlink" title="java.lang.InstantiationException"></a>java.lang.InstantiationException</h1><p>通过反射获取类的所有属性，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">import java.lang.reflect.Field;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by lyyybz</div><div class="line"> * Time : 2016/12/21 8:46</div><div class="line"> */</div><div class="line">public class ReflectTest</div><div class="line">&#123;</div><div class="line">    public static void main(String[] args)</div><div class="line">    &#123;</div><div class="line">        try</div><div class="line">        &#123;</div><div class="line">            fn(Assistant.class.getName());</div><div class="line">        &#125; catch (Exception e)</div><div class="line">        &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void fn(String classname) throws Exception</div><div class="line">    &#123;</div><div class="line">        Class clazz = Class.forName(classname);</div><div class="line">        Field[] field = clazz.getDeclaredFields();</div><div class="line">        System.out.println(&quot;field size : &quot; + field.length);</div><div class="line">        for (Field fields : field)</div><div class="line">        &#123;</div><div class="line">            if (fields.getModifiers() == 2 || fields.getModifiers() == 10)</div><div class="line">            &#123;</div><div class="line">                fields.setAccessible(true);</div><div class="line">            &#125;</div><div class="line">            System.out.println(fields.getName() + &quot; --&gt; &quot; + fields.get(clazz.newInstance()));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static class Assistant</div><div class="line">    &#123;</div><div class="line">        private String name;</div><div class="line">        private int value;</div><div class="line"></div><div class="line">        public Assistant(String name, int value)</div><div class="line">        &#123;</div><div class="line">            this.name = name;</div><div class="line">            this.value = value;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public String getName()</div><div class="line">        &#123;</div><div class="line">            return name;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public int getValue()</div><div class="line">        &#123;</div><div class="line">            return value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">java.lang.InstantiationException: cn.com.eastsoft.ddc.util.other.ReflectTest$Assistant</div><div class="line">	at java.lang.Class.newInstance0(Class.java:342)</div><div class="line">	at java.lang.Class.newInstance(Class.java:310)</div><div class="line">	at cn.com.eastsoft.ddc.util.other.ReflectTest.fn(ReflectTest.java:35)</div><div class="line">	at cn.com.eastsoft.ddc.util.other.ReflectTest.main(ReflectTest.java:17)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)</div><div class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)</div><div class="line">	at java.lang.reflect.Method.invoke(Method.java:597)</div><div class="line">	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)</div></pre></td></tr></table></figure></p>
<p>查看了一下“Instantiation”的意思：实例化。</p>
<p>出现这个错误的原因应该就是不能实例化 Assistant 类。出现这种异常的原因通常情况下是由于要实例化的对象是一个接口或者是抽象类等无法被实例化的类，但是我的 Assistant 类并不符合上面的条件。查看 Class.newInstance() 的源码，发现实例化类的时候使用的是类的无参构造函数，而上边的 Assistant 类没有无参数的构造方法。</p>
<p>解决办法，在 Assistant 类中添加一个无参构造函数，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public Assistant()</div><div class="line">&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">field size : 2</div><div class="line">name --&gt; null</div><div class="line">value --&gt; 0</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JDK 和 JRE 文件结构]]></title>
      <url>https://www.lyyybz.com/lyyybz.github.io/2016/12/20/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80-JAVA-JDK%E5%92%8CJRE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<p><strong>JDK 和 JRE 文件结构 </strong><br><a href="http://docs.oracle.com/javase/6/docs/technotes/tools/windows/jdkfiles.html#jdk1.6.0" target="_blank" rel="external">JDK and JRE File Structure</a> - 原文<br>本文简要地介绍一下 JDK 的目录和这些目录所包含的文件。需要注意的是，JRE 的文件结构与 JDK 中 jre 目录的结构是相同的。<br><a id="more"></a></p>
<h1 id="用于开发的文件和目录"><a href="#用于开发的文件和目录" class="headerlink" title="用于开发的文件和目录"></a>用于开发的文件和目录</h1><p>Development Files and Directories</p>
<p>这一节先来看一下在 Java 开发中最为重要的文件和必需的目录。需要注意的，诸如 demos、Java 源代码和 C 语言头文件这些目录并不是必需的。关于这些目录结构会在 其他的文件和目录 一节中描述。</p>
<pre><code>           jdk1.6.0
     _________|___________________________
    |         |                           |
   bin       lib                         jre
    |         |           ________________|_________________
java.exe  tools.jar      |                                  |
javac.exe   dt.jar      bin                                lib
javap.exe             ___|___ _______         ________ _____|_______ _____
javah.exe            |       |       |       |        |     |       |     |
javadoc.exe      java.exe  client  server  rt.jar    ext security applet fonts
                 java.dll    |       |   charsets.jar |
                 awt.dll  jvm.dll jvm.dll        localedata.jar
</code></pre><p>假设 JDK 安装在了 c:\jdk1.6.0 目录中，下面是一些重要的目录：</p>
<p><strong>c:\jdk1.6.0</strong><br>JDK 安装的根目录。包括 COPYRIGHT、LICENSE 和 README 文件。还包括了 src.zip，这是 Java 平台源代码的压缩包。</p>
<p><strong>c:\jdk1.6.0\bin</strong><br>Java 开发工具集（Java Development Kit）中用于开发工具的可执行文件。系统的 PATH 环境变量应该包含这个目录项。关于这些工具，在 <a href="http://java.sun.com/javase/6/docs/technotes/tools/index.html" target="_blank" rel="external">JDK 工具 (JDK Tools)</a>中可以了解更多的信息。</p>
<p><strong>c:\jdk1.6.0\lib</strong><br>开发工具所使用的文件。其中的 tools.jar 包含了在 JDK 中工具和实用工具支持的非核心类库。还有 dt.jar，这是 BeanInfo 文件设计时（DesignTime）的压缩包，用于告知交互式开发环境（interactive development environemts, IDE’s）如何展示 Java 组件，并且如何让开发者自定义这些用于应用程序中。</p>
<p><strong>c:\jdk1.6.0\jre</strong><br>JDK 开发工具所使用的 Java 运行环境的根目录。这个运行环境是一个 Java 平台的实现。这个目录使用 java.home 系统属性来表示。</p>
<p><strong>c:\jdk1.6.0\jre\bin</strong><br>Java 平台所使用工具和类库的可执行文件和 DLL 文件。可执行文件与 c:\jdk1.6.0\bin 中的文件是相同的。这个 Java 载入工具服务作为一个应用程序加载器（用于替换在 JDK 1.1 版本发布旧的 jre 工具）。这个目录没有必要放在系统的 PATH 环境变量中。</p>
<p><strong>c:\jdk1.6.0\jre\bin\clien</strong>t<br>包括用于 Java HotSpotTM Client 虚拟机的 DLL 文件。</p>
<p><strong>c:\jdk1.6.0\jre\bin\server</strong><br>包括用于 Java HotSpotTM Server 虚拟机的 DLL 文件。</p>
<p><strong>c:\jdk1.6.0\jre\lib</strong><br>Java 运行环境所使用的核心类库、属性设置和资源文件。例如：</p>
<ul>
<li>rt.jar —— 引导类（运行时（RunTime）的类，包含了 Java 平台的核心 API）。</li>
<li>charsets.jar —— 字符转换类。</li>
</ul>
<p>除了 ext 子目录（下面有描述）外，还有若干个其他的资源目录没有描述。</p>
<p><strong>c:\jdk1.6.0\jre\lib\ext</strong><br>用于 <a href="http://java.sun.com/javase/6/docs/technotes/guides/extensions/index.html" target="_blank" rel="external">扩展 (Extensions)</a> Java 平台默认的安装目录。</p>
<ul>
<li>localedata.jar —— 用于 java.text 和 java.util 包的区域（locale）数据。</li>
</ul>
<p><strong>c:\jdk1.6.0\jre\lib\security</strong><br>包含了用于安全管理的文件。其中包括安全策略（java.policy）和安全属性（java.security）文件。</p>
<p><strong>c:\jdk1.6.0\jre\lib\applet</strong><br>用于 Applet 支持类的 jar 文件，可以放在 lib/applet 目录中。Applet 类通过 Applet 类加载器从本地文件系统中预加载，这样为减小大型 Applet 的启动时间提供了一些方式，好像从网上已经下载完成了一样。</p>
<p><strong>c:\jdk1.6.0\jre\lib\fonts</strong><br>包括平台使用的 TrueType 字体文件。</p>
<h1 id="其他的文件和目录"><a href="#其他的文件和目录" class="headerlink" title="其他的文件和目录"></a>其他的文件和目录</h1><p>Additional Files and Directories</p>
<p>这一节来看一下 demos、Java 源代码和 C 语言头文件的目录结构。</p>
<pre><code>                jdk1.6.0
          _________|__________
         |         |          |
       demo     include    src.zip
    _____|____ __________ __________
   |          |          |          |
applets      jfc        jpda      plugin
</code></pre><p>上面所展示额外的目录有：</p>
<p><strong>c:\jdk1.6.0\src.zip</strong><br>包含 Java 平台源代码的压缩包。</p>
<p><strong>c:\jdk1.6.0\demo</strong><br>附有源代码的示例程序，用于展示如何在 Java 平台上编制程序。</p>
<p><strong>c:\jdk1.6.0\demo\applets</strong><br>能在 Web 页面上使用的 Applet。</p>
<p><strong>c:\jdk1.6.0\demo\jfc</strong><br>使用 Java 2DTM 和 JFC/Swing 功能的示例程序。</p>
<p><strong>c:\jdk1.6.0\demo\jpda</strong><br>使用 <a href="http://java.sun.com/javase/6/docs/technotes/guides/jpda/index.html" target="_blank" rel="external">Java 平台调试架构 (Java Platform Debugging Architecture)</a>的示例程序。包括用于 javadd 和 jdb 实用工具的源代码。</p>
<p><strong>c:\jdk1.6.0\demo\plugin</strong><br>包含使用 Java 插件产品的演示。</p>
<p><strong>c:\jdk1.6.0\include</strong><br>C 语言的头文件，用于支持 <a href="http://java.sun.com/javase/6/docs/technotes/guides/jni/index.html" target="_blank" rel="external">Java 本地方法接口 (Java Native Interface)</a>和 <a href="http://java.sun.com/javase/6/docs/technotes/guides/jpda/index.html" target="_blank" rel="external">Java 虚拟机调试器接口 (Java Virtual Machine Debugger Interface)</a>的本地代码程序设计。</p>
<h1 id="译后记"><a href="#译后记" class="headerlink" title="译后记"></a>译后记</h1><p>Translation notes</p>
<p><a href="http://www.oracle.com/technetwork/java/index.html" target="_blank" rel="external">Sun Java</a> 上的<a href="http://docs.oracle.com/javase/6/docs/technotes/tools/windows/jdkfiles.html" target="_blank" rel="external">这篇文章</a>仅仅对 Java 安装目录中主要的目录和文件作了概要性的介绍，并没有深入也没有将安装目录中所有的都介绍完整。如果想了解其他目录的结构以及用途，还是需要查阅其他相关文档说明。这里补充说明一下其他文件和目录：</p>
<p><strong>c:\jdk1.6.0\jre\lib\fontconfig.properties.src</strong><br>这个文件是用于配置逻辑字体的，在 AWT/Swing 程序中可能会用到。如果用 NetBeans 会发现 NetBeans 中编辑器的字体很难看，我们就可以通过这个文件进行修改，然后再将这个文件改名为 fontconfig.properties。</p>
<p><strong>c:\jdk1.6.0\jre\lib\logging.properties</strong><br>这个文件是 JDK 1.4 后增加的，用于配置 Java 提供的日志记录器的格式，相当于 log4j 的 log4j.properties 文件。更多关于 Java Logging 请点击<a href="http://java.sun.com/javase/6/docs/technotes/guides/logging/overview.html" target="_blank" rel="external">这里</a>。</p>
<p><strong>c:\jdk1.6.0\jre\lib\i386\jvm.cfg</strong><br>64 位平台是放在 ia64 目录下的，而非 i386 目录下。这个文件是 JVM 的配置文件，指定 JVM 加载哪个版本的 jvm.dll 文件。我们机器中默认安装是启动 client 的 JVM 的，如果想要启动 server 的 JVM，只要把 jvm.cfg 文件中的 -server KNOWN 放到 -client KNOWN 前面去就可以了。</p>
<p><strong>c:\jdk1.6.0\jre\lib\zi</strong><br>这个目录中存放着很重要的时区参数，Java 中所有有关日期、时间、时区的操作都跟这个目录下的文件有关。比如说：时区的夏令时讫止时间、与标准时间的时间差、版本等等信息。比如说，我们电脑中的时区名为 Asia/Shanghai 那这个时区名对应的文件为 c:\jdk1.6.0\jre\lib\zi\Asia\Shanghai，这是一个二进制文件，是由sun.util.calendar.ZoneInfoFile类负责解析的（这个类未被归档，所以没有 API DOC，需要去 <a href="http://openjdk.java.net/" target="_blank" rel="external">OpenJDK</a> 下载 <a href="http://download.java.net/openjdk/jdk6/" target="_blank" rel="external">JDK 的源代码</a>才能看到源码和源码中的注释）。</p>
<p><strong>c:\jdk1.6.0\jre\lib\cmm</strong><br>这个目录中存放的是色彩管理配置文件，这些文件是用于 Java 2D API 执行色彩对应转换的。<br>更多的说明可以参考 JDK 安装目录下的 README.html 文件，或者在线查看<a href="http://java.sun.com/javase/6/webnotes/README.html" target="_blank" rel="external">README</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA RMI 远程方法调用]]></title>
      <url>https://www.lyyybz.com/lyyybz.github.io/2016/12/19/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80-JAVA-JAVA%20RMI%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>RMI(Remote Method Invocation) 远程方法调用是一种计算机之间利用远程对象互相调用实现双方通讯的一种通讯机制。使用这种机制，某一台计算机上的对象可以调用另外一台计算机上的对象来获取远程数据。<br><a id="more"></a><br>RMI 是 Enterprise JavaBeans 的支柱，是建立分布式Java应用程序的方便途径。在过去，TCP/IP套接字通讯是远程通讯的主要手段，但此开发方式没有使用面向对象的方式实现开发，在开发一个如此的通讯机制时往往令程序员感觉到乏味，对此 RPC(Remote Procedure Call） 应运而生，它使程序员更容易地调用远程程序，但在面对复杂的信息传讯时，RPC 依然未能很好的支持，而且 RPC 未能做到面向对象调用的开发模式。针对 RPC 服务遗留的问题，RMI 出现在世人面前，它被设计成一种面向对象的通讯方式，允许程序员使用远程对象来实现通信，并且支持多线程的服务，这是一次远程通讯的革命，为远程通信开辟新的里程碑。</p>
<h1 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h1><ol>
<li>先创建远程接口及声明远程方法，注意这是实现双方通讯的接口，需要继承 Remote</li>
<li>开发一个类来实现远程接口及远程方法，值得注意的是实现类需要继承 UnicastRemoteObject</li>
<li>通过 javac 命令编译文件，通过 java -server 命令注册服务，启动远程对象</li>
<li>最后客户端查找远程对象，并调用远程方法</li>
</ol>
<h1 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h1><p>首先为服务建立一个 Model 层，注意因为此对象需要现实进行远程传输，所以必须继承 Serializable<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">package rmi.model;</div><div class="line"></div><div class="line">import java.io.Serializable;</div><div class="line"></div><div class="line">//注意对象必须继承Serializable</div><div class="line">publicclass PersonEntity implements Serializable &#123;</div><div class="line">    privateint id;</div><div class="line">    private String name;</div><div class="line">    privateint age;</div><div class="line"></div><div class="line">    publicvoid setId(int id) &#123;</div><div class="line">        this.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    publicint getId() &#123;</div><div class="line">        return id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    publicvoid setName(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getName() &#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    publicvoid setAge(int age) &#123;</div><div class="line">        this.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    publicint getAge() &#123;</div><div class="line">        return age;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建远程接口PersonService,注意远程接口需要继承Remote<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">package rmi.service;</div><div class="line"></div><div class="line">import java.rmi.Remote;</div><div class="line">import java.rmi.RemoteException;</div><div class="line">import java.util.List;</div><div class="line">import rmi.model.*;</div><div class="line"></div><div class="line">//此为远程对象调用的接口，必须继承Remote类</div><div class="line">publicinterface PersonService extends Remote &#123;</div><div class="line">    public List&lt;PersonEntity&gt; GetList() throws RemoteException;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>建立PersonServiceImpl实现远程接口，注意此为远程对象实现类，需要继承UnicastRemoteObject<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">package rmi.serviceImpl;</div><div class="line"></div><div class="line">import java.rmi.RemoteException;</div><div class="line">import java.rmi.server.UnicastRemoteObject;</div><div class="line">import java.util.LinkedList;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import rmi.model.PersonEntity;</div><div class="line">import rmi.service.*;</div><div class="line"></div><div class="line">//此为远程对象的实现类，须继承UnicastRemoteObject</div><div class="line">publicclass PersonServiceImpl extends UnicastRemoteObject implements PersonService &#123;</div><div class="line"></div><div class="line">    public PersonServiceImpl() throws RemoteException &#123;</div><div class="line">        super();</div><div class="line">        // TODO Auto-generated constructor stub</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public List&lt;PersonEntity&gt; GetList() throws RemoteException &#123;</div><div class="line">        // TODO Auto-generated method stub</div><div class="line">        System.out.println(&quot;Get Person Start!&quot;);</div><div class="line">        List&lt;PersonEntity&gt; personList=new LinkedList&lt;PersonEntity&gt;();</div><div class="line">        </div><div class="line">        PersonEntity person1=new PersonEntity();</div><div class="line">        person1.setAge(25);</div><div class="line">        person1.setId(0);</div><div class="line">        person1.setName(&quot;Leslie&quot;);</div><div class="line">        personList.add(person1);</div><div class="line">        </div><div class="line">        PersonEntity person2=new PersonEntity();</div><div class="line">        person2.setAge(25);</div><div class="line">        person2.setId(1);</div><div class="line">        person2.setName(&quot;Rose&quot;);</div><div class="line">        personList.add(person2);</div><div class="line">        </div><div class="line">        return personList;</div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>建立服务器端，在服务器端注册RMI通讯端口与通讯路径，然后通讯javac命令编译文件，通过java -server 命令注册服务。以下面代码为例，如果阁下将项目建立于D:\RMI\RemotingService文件夹上时，则先输入D:\RMI\RemotingService\src&gt;javac rmi/remotingservice/Program.java获取Program.class（如何阁下使用的MyEclipse等开发工具，可跳过此步，直接在*/bin文件夹中直接调用已经生成的Program.class），然后输入D:\RMI\RemotingService\src&gt;java rmi/remotingservice/Program启动服务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">package rmi.remotingservice;</div><div class="line"></div><div class="line">import java.rmi.Naming;</div><div class="line">import java.rmi.registry.LocateRegistry;</div><div class="line"> </div><div class="line">import rmi.service.*;</div><div class="line">import rmi.serviceImpl.*;</div><div class="line"></div><div class="line">publicclass Program&#123;</div><div class="line"></div><div class="line">    publicstaticvoid main(String[] args) &#123;</div><div class="line">        try &#123;</div><div class="line">            PersonService personService=new PersonServiceImpl();</div><div class="line">            //注册通讯端口</div><div class="line">            LocateRegistry.createRegistry(6600);</div><div class="line">            //注册通讯路径</div><div class="line">            Naming.rebind(&quot;rmi://127.0.0.1:6600/PersonService&quot;, personService);</div><div class="line">            System.out.println(&quot;Service Start!&quot;);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            // TODO Auto-generated catch block</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后建立客户端进行测试，注意客户调用的RMI路径必须服务器配置一致<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package rmi.remotingclient;</div><div class="line"></div><div class="line">import java.rmi.Naming;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import rmi.model.PersonEntity;</div><div class="line">import rmi.service.*;</div><div class="line"></div><div class="line">publicclass Program &#123;</div><div class="line">    publicstaticvoid main(String[] args)&#123;</div><div class="line">        try&#123;</div><div class="line">            //调用远程对象，注意RMI路径与接口必须与服务器配置一致</div><div class="line">            PersonService personService=(PersonService)Naming.lookup(&quot;rmi://127.0.0.1:6600/PersonService&quot;);</div><div class="line">            List&lt;PersonEntity&gt; personList=personService.GetList();</div><div class="line">            for(PersonEntity person:personList)&#123;</div><div class="line">                System.out.println(&quot;ID:&quot;+person.getId()+&quot; Age:&quot;+person.getAge()+&quot; Name:&quot;+person.getName());</div><div class="line">            &#125;</div><div class="line">        &#125;catch(Exception ex)&#123;</div><div class="line">            ex.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><ol>
<li>在命令提示符调用java命令时，显示并无此命令。这是因为未在“环境变量”中绑定JAVA的JDK命令造成的，你首先单击“计算机右键”-&gt;“属性”-&gt;“高级”-&gt;“环境变量”。在系统变量Path设置中加载为JDK的路径  .;D:\Program Files\Genuitec\Common\binary\com.sun.java.jdk.win32.x86_1.6.0.013\bin。然后在ClassPath加载服务器端的Program.class地址 .;D:\RMI\RemotingService\bin</li>
<li>在调用javac命令时出现“javac 找不到文件 ….. ”此错误，可能是因为阁下输入的文件路径出现错误造成，注意不要把D:\RMI\RemotingService\src&gt;javac rmi/remotingservice/Program.java写错为D:\RMI\RemotingService\src&gt;javac rmi.remotingservice.Program.java</li>
<li>在调用D:\RMI\RemotingService\bin&gt;java rmi/remotingservice/Program命令时出现“Exception in thread ‘main’ java.lang.NoClassEdfoundError”错误，第一这可能是阁下把Program错写为Program.class，注意java命令不需要加后缀名。第二可能是阁下把“java rmi/remotingservice/Program”错写为“java rmi\remotingservice\Program”。</li>
</ol>
<h1 id="工程源码"><a href="#工程源码" class="headerlink" title="工程源码"></a>工程源码</h1><p>下载地址：<a href="RMI_Project.rar">RMI_Project.rar</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://www.lyyybz.com/lyyybz.github.io/2016/12/13/hello-Hexo/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<pre><code>               _ooOoo_    
              o8888888o   
              88&quot; . &quot;88
              (| -_- |)
              O\  =  /O
           ____/`---&apos;\____
         .&apos;  \\|     |//  `.
        /  \\|||  :  |||//  \
       /  _||||| -:- |||||-  \
       |   | \\\  -  /// |   |
       | \_|  &apos;&apos;\---/&apos;&apos;  |   |
       \  .-\__  `-`  ___/-. /
     ___`. .&apos;  /--.--\  `. . __
  .&quot;&quot; &apos;&lt;  `.___\_&lt;|&gt;_/___.&apos;  &gt;&apos;&quot;&quot;.
 | | :  `- \`.;`\ _ /`;.`/ - ` : | |
 \  \ `-.   \_ __\ /__ _/   .-` /  /
======`-.____`-.___\_____/___.-`____.-&apos;======
               `=---=&apos;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        佛祖保佑       永无BUG
</code></pre>]]></content>
    </entry>
    
  
  
</search>
